{"version":3,"sources":["_helpers/fetch-wrapper.js","_services/account.service.js","_helpers/history.js","app/spinner/spinner.slice.js","account/account.slice.js","account/components/PasswordShowHide.jsx","account/Login.jsx","account/Register.jsx","account/RegistratonVerifyEmail.jsx","account/ForgotPassword.jsx","account/password-reset/PasswordReset.jsx","account/password-reset/InvalidToken.jsx","account/password-reset/PasswordResetContainer.jsx","images/minima_logo_white.svg","images/minima_logo.svg","account/layout/AccountLogo.js","account/layout/AccountHeader.jsx","account/layout/AccountFooter.jsx","account/AccountMessage.jsx","account/AccountLayout.jsx","layout/Logo.jsx","_components/useMountTransition.js","_components/NavMain.jsx","home/home.slice.js","layout/Header.jsx","layout/Footer.jsx","_components/MainLayout.jsx","home/pages/GetStarted.jsx","home/pages/GetStartedAndroid.jsx","home/pages/GetStartedWindows.jsx","home/pages/GetStartedMac.jsx","home/pages/GetStartedLinux.jsx","home/pages/GetStartedVPS.jsx","home/pages/IncentiveID.jsx","home/pages/InviteLink.jsx","home/pages/RewardsPage.jsx","routes/app.routes.jsx","app/spinner/Spinner.jsx","app/App.jsx","app/store.js","index.jsx"],"names":["fetchWrapper","get","url","fetch","method","mode","credentials","then","handleResponse","getWithoutRedirect","post","body","requestOptions","headers","JSON","stringify","res","postPhone","postForm","urlencoded","URLSearchParams","Object","entries","key","value","append","put","response","text","data","parse","ok","error","message","statusText","status","Promise","reject","accountService","createBrowserHistory","login","email","password","username","logout","verifyPhoneNumber","phoneNumber","registration","params","registratonComplete","token","passwordResetToken","passwordResetValidateToken","passwordReset","resetToken","spinnerSlice","createSlice","name","initialState","spinning","reducers","startSpinner","state","stopSpinner","actions","selectSpinning","createSelector","spinner","dispatch","getState","setMessage","setLoggedIn","accountSlice","loggedIn","registrationComplete","passwordResetTokenValid","passwordResetComplete","phone","action","payload","setPhone","setRegistrationComplete","setPasswordResetTokenValid","setPasswordResetComplete","selectAccount","account","selectLoggedIn","selectMessage","selectPhone","selectRegistrationComplete","selectPasswordResetTokenValid","selectPasswordResetComplete","PasswordShowHide","field","form","useState","showHidePassword","changeShowHidePassword","hasError","touched","errors","passShowIcon","placeHolder","className","onClick","type","placeholder","Login","useDispatch","navigate","useNavigate","validationSchema","Yup","shape","trim","required","onRegisterClicked","onForgotPasswordClicked","initialValues","onSubmit","component","Register","_reCaptchaRef","createRef","verifiedPhone","useSelector","useSearchParams","searchParams","Cookies","set","expires","confirmPassword","phonePrefix","phoneVerifyCode","inviteCode","confirmEmail","oneOf","min","matches","length","uppercase","nullable","optional","onVerifyClicked","fields","cleaned","prefixString","prefix","parseInt","toString","generatePrefix","fullNumber","onCancelClicked","formatPhoneNumberOutput","isValid","newNumber","countryData","isExtension","replace","formatPhonePrefixOutput","selectedCountryData","dialCode","values","setFieldValue","setFieldError","validateForm","href","target","render","isSubmitting","setFieldTouched","defaultCountry","defaultValue","fieldId","fieldName","onPhoneNumberBlur","autoHideDialCode","separateDialCode","inputClassName","phoneNumberValid","onSelectFlag","args","console","log","onPhoneNumberChange","preferredCountries","style","display","onPaste","e","preventDefault","onCopy","ref","sitekey","onChange","size","onMouseOver","current","execute","disabled","keys","RegistratonVerifyEmail","useEffect","registrationVerifyEmail","to","ForgotPassword","passwordResetEmail","PasswordReset","InvalidToken","PasswordResetContainer","validToken","passwordResetValidate","AccountLogo","process","src","LogoLight2x","alt","LogoDark2x","AccountHeader","headerClass","classNames","AccountFooter","AccountMessage","textAlign","role","AccountLayout","Logo","useMountTransition","isMounted","unmountDelay","hasTransitionedIn","setHasTransitionedIn","timeoutId","setTimeout","clearTimeout","NavMain","setIsMounted","window","innerWidth","screenWidth","setScreenWidth","toggleNav","changeWidth","addEventListener","removeEventListener","getNodeId","setNodeId","logOutIfUnauthorised","includes","homeSlice","nodeId","dailyRewards","previousRewards","inviterRewards","lastPing","setInviteCode","setDailyRewards","setPreviousRewards","setInviterRewards","setLastPing","selectHome","home","selectNodeId","selectInviteCode","selectDailyRewards","selectPreviousRewards","selectInviterRewards","selectLastPing","options","weekday","year","month","day","hour","minute","timeZoneName","Header","Date","toLocaleString","undefined","Footer","MainLayout","GetStarted","scrollTo","GetStartedAndroid","nodeIdCopied","setNodeIdCopied","showContentOne","setShowContentOne","showContentTwo","setShowContentTwo","handleContentTwo","open","navigator","clipboard","writeText","GetStartedWindows","GetStartedMac","GetStartedLinux","GetStartedVPS","IncentiveID","InviteLink","tmpInviteCode","inviteCodeCopied","setInviteCodeCopied","RewardsPage","rewards","AppRoutes","path","element","children","index","Spinner","visible","spinnerStyle","position","left","top","parentDisable","background","opacity","zIndex","height","width","App","routes","useRoutes","ReactGA","initialize","send","configureStore","reducer","accountReducer","homeReducer","spinnerReducer","store","document","getElementById"],"mappings":"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","file":"static/js/main.8e86360d.chunk.js","sourcesContent":["export const fetchWrapper = {\n    get,\n    getWithoutRedirect,\n    post,\n    postPhone,\n    postForm,\n    put,\n}\n\nfunction getWithoutRedirect(url) {\n    const requestOptions = {\n        method: 'GET',\n        mode: 'cors',\n        credentials: 'include',\n    }\n    return fetch(url, requestOptions)\n}\n\nfunction get(url) {\n    const requestOptions = {\n        method: 'GET',\n        mode: 'cors',\n        credentials: 'include',\n    }\n    return fetch(url, requestOptions).then(handleResponse)\n}\n\nfunction post(url, body) {\n    const requestOptions = {\n        method: 'POST',\n        mode: 'cors',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(body),\n    }\n    return fetch(url, requestOptions).then((res) => handleResponse(res))\n}\n\n// probably could implement this better,\n// but this is the same as post(),\n// except without credentials\nfunction postPhone(url, body) {\n    const requestOptions = {\n        method: 'POST',\n        body,\n    }\n    return fetch(url, requestOptions).then((res) => handleResponse(res))\n}\n\nfunction postForm(url, body) {\n    var urlencoded = new URLSearchParams()\n    for (const [key, value] of Object.entries(body)) {\n        urlencoded.append(key, value)\n    }\n\n    var requestOptions = {\n        method: 'POST',\n        mode: 'cors',\n        credentials: 'include',\n        body: urlencoded,\n    }\n\n    return fetch(url, requestOptions).then(handleResponse)\n}\n\nfunction put(url, body) {\n    const requestOptions = {\n        method: 'PUT',\n        mode: 'cors',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(body),\n    }\n    return fetch(url, requestOptions).then(handleResponse)\n}\n\nfunction handleResponse(response) {\n    return response.text().then((text) => {\n        const data = text && JSON.parse(text)\n\n        if (!response.ok) {\n            const error = (data && data.message) || response.statusText\n            const status = response.status\n            return Promise.reject({ error, status })\n        }\n\n        return data\n    })\n}\n","import { fetchWrapper } from './../_helpers'\n\nexport const accountService = {\n    login,\n    logout,\n    verifyPhoneNumber,\n    registration,\n    registratonComplete,\n    passwordResetToken,\n    passwordResetValidateToken,\n    passwordReset,\n}\n\nfunction login(email, password) {\n    return fetchWrapper.postForm(`/api/login`, { username: email, password })\n}\n\nfunction logout() {\n    return fetchWrapper.post(`/api/logout`, {})\n}\n\n// registration\n\nfunction verifyPhoneNumber(phoneNumber) {\n    // back end will use the same service to make sure verification code is correct\n    const PHONE_VERIFY_ENDPOINT = 'https://verify-9776-kiovbv.twil.io/start-verify'\n    const data = new URLSearchParams()\n    data.append('to', phoneNumber)\n    return fetchWrapper.postPhone(PHONE_VERIFY_ENDPOINT, data)\n}\n\nfunction registration(params) {\n    return fetchWrapper.post(`/api/user/registration`, params)\n}\n\nfunction registratonComplete(token) {\n    return fetchWrapper.post(`/api/user/registration/${token}`)\n}\n\n// password reset\n\nfunction passwordResetToken(email) {\n    return fetchWrapper.post(`/api/user/password-reset/token`, { email })\n}\n\nfunction passwordResetValidateToken(token) {\n    return fetchWrapper.get(`/api/user/password-reset/${token}`, { token })\n}\n\nfunction passwordReset({ resetToken, password }) {\n    return fetchWrapper.post(`/api/user/password-reset/${resetToken}`, { password })\n}\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","import { createSlice, createSelector } from '@reduxjs/toolkit'\n\nexport const spinnerSlice = createSlice({\n    name: 'spinner',\n    initialState: {\n        spinning: 0,\n    },\n    reducers: {\n        startSpinner: (state) => {\n            state.spinning++\n        },\n        stopSpinner: (state) => {\n            state.spinning--\n        },\n    },\n})\n\nexport const { startSpinner, stopSpinner } = spinnerSlice.actions\n\nexport default spinnerSlice.reducer\n\n///// selectors\nconst selectSpinner = (state) => state.spinner\nexport const selectSpinning = createSelector(selectSpinner, (state) => state.spinning > 0)\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport { fetchWrapper } from '../_helpers'\nimport { accountService } from '../_services'\nimport { startSpinner, stopSpinner } from '../app/spinner/spinner.slice'\n\n// check if the user is logged in\nexport const loggedInTest = (url) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    console.log(\"Link\" + url)\n    fetchWrapper.getWithoutRedirect(url).then(\n        (res) => {\n            dispatch(setLoggedIn(res.ok))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            dispatch(setLoggedIn(false))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const login = (credentials) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.login(credentials.email, credentials.password).then(\n        () => {\n            dispatch(setLoggedIn(true))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            let message = 'Login failed'\n            if (status === 450) {\n                message = \"Registered but not verified. Please reset your password with the 'Forgot Password' link\"\n            }\n            dispatch(setLoggedIn(true))\n            // dispatch(setLoggedIn(false))\n            dispatch(setMessage(message))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const logout = () => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.logout().then(\n        () => {\n            dispatch(setLoggedIn(false))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            // If logout returns a failed response, there is inconsistent login state between back and fron end\n            // so we force the user to login again\n            dispatch(setLoggedIn(false))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const register = (credentials) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.registration(credentials).then(\n        () => {\n            dispatch(\n                setMessage(\"Registration successful. Please check your email. Don't forget to check your spam folder\")\n            )\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            let message = 'Registration failed'\n            if (status === 409) {\n                message =\n                    \"You have already registered with this email. Please click 'Cancel' and reset your password with the 'Forgot Password' link\"\n            }\n            if (status === 410) {\n                message = 'You have already registered with this Phone Number'\n            }\n\n            if (status === 411) {\n                message = 'Invite Code not valid'\n            }\n\n            if (status === 413) {\n                message = 'Registration failed. Double check your Phone Number or re-send the Verification Code'\n            }\n            dispatch(setMessage(message))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const passwordResetEmail = (email) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.passwordResetToken(email).then(\n        () => {\n            dispatch(\n                setMessage(\n                    \"Please check your email for password reset instructions. Don't forget to check your spam folder\"\n                )\n            )\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            dispatch(setMessage('Password Reset failed'))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const registrationVerifyEmail = (token) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.registratonComplete(token).then(\n        () => {\n            dispatch(setMessage('Verification successful, you can now login'))\n            dispatch(setRegistrationComplete(true))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            // dispatch(setMessage('Verify email failed'))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\n// validate the password reset token\nexport const passwordResetValidate = (token) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n    accountService.passwordResetValidateToken(token).then(\n        () => {\n            // dispatch(setMessage('Valid password reset token'))\n            dispatch(setPasswordResetTokenValid(true))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            // dispatch(setMessage('Invalid password reset token'))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\n// set new password\nexport const passwordReset =\n    ({ resetToken, password, confirmPassword }) =>\n    (dispatch, getState) => {\n        dispatch(startSpinner())\n        dispatch(setMessage(''))\n        accountService.passwordReset({ resetToken, password, confirmPassword }).then(\n            () => {\n                dispatch(setMessage('Password reset'))\n                dispatch(setPasswordResetComplete(true))\n                dispatch(stopSpinner())\n            },\n            ({ error, status }) => {\n                dispatch(setMessage('Password reset failure'))\n                dispatch(stopSpinner())\n            }\n        )\n    }\n\nexport const verifyNumber = (phoneNumber) => (dispatch, getState) => {\n    dispatch(startSpinner())\n    dispatch(setMessage(''))\n\n    accountService.verifyPhoneNumber(phoneNumber).then(\n        () => {\n            dispatch(setMessage('Verification Code sent to ' + phoneNumber))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            let message = 'Could not send Verification Code to ' + phoneNumber\n            if (status === 429) {\n                message = 'Verification is busy, please try again in 10 minutes'\n            }\n\n            dispatch(setMessage(message))\n            dispatch(setPhone(phoneNumber))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const accountSlice = createSlice({\n    name: 'account',\n    initialState: {\n        loggedIn: false,\n        registrationComplete: false,\n        passwordResetTokenValid: false,\n        passwordResetComplete: false,\n        message: '',\n        phone: '',\n    },\n    reducers: {\n        setMessage: (state, action) => {\n            state.message = action.payload\n        },\n        setPhone: (state, action) => {\n            state.phone = action.payload\n        },\n        setLoggedIn: (state, action) => {\n            state.loggedIn = action.payload\n        },\n        setRegistrationComplete: (state, action) => {\n            state.registrationComplete = action.payload\n        },\n        setPasswordResetTokenValid: (state, action) => {\n            state.passwordResetTokenValid = action.payload\n        },\n        setPasswordResetComplete: (state, action) => {\n            state.passwordResetComplete = action.payload\n        },\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const {\n    setMessage,\n    setPhone,\n    setLoggedIn,\n    setRegistrationComplete,\n    setPasswordResetTokenValid,\n    setPasswordResetComplete,\n} = accountSlice.actions\n\nexport default accountSlice.reducer\n\n///// selectors\n\nconst selectAccount = (state) => state.account\nexport const selectLoggedIn = createSelector(selectAccount, (state) => state.loggedIn)\nexport const selectMessage = createSelector(selectAccount, (state) => state.message)\nexport const selectPhone = createSelector(selectAccount, (state) => state.phone)\nexport const selectRegistrationComplete = createSelector(selectAccount, (state) => state.registrationComplete)\nexport const selectPasswordResetTokenValid = createSelector(selectAccount, (state) => state.passwordResetTokenValid)\nexport const selectPasswordResetComplete = createSelector(selectAccount, (state) => state.passwordResetComplete)\n","import React, { useState, useEffect } from \"react\";\n\nconst PasswordShowHide = ({ field, form }) => {\n  const [showHidePassword, changeShowHidePassword] = useState(false);\n  const hasError = form.touched[field.name] && form.errors[field.name];\n  const passShowIcon = !showHidePassword? \"icon-on\" : \"icon-off\"\n  const placeHolder = field.name === \"confirmPassword\" ? \"Confirm password*\" : \"Enter password*\"\n\n  return (\n    <>\n      <i\n        className={hasError ? \"\" : \"\" + passShowIcon}\n        onClick={() => changeShowHidePassword(!showHidePassword)}\n      > \n      </i>\n      <input\n        type={showHidePassword ? \"text\" : \"password\"}\n        {...field}\n        className={hasError ? \"is-invalid form-control\" : \"form-control\"}\n        placeholder={placeHolder}\n      />\n    </>\n  );\n};\n\nexport default PasswordShowHide;\n","import React from 'react'\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\nimport { useNavigate, Link } from 'react-router-dom'\nimport * as Yup from 'yup'\nimport { login } from './account.slice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectLoggedIn, setMessage } from './account.slice'\nimport PasswordShowHide from \"./components/PasswordShowHide\";\n\nfunction Login() {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const initialValues = {\n        email: '',\n        password: '',\n    }\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().trim().email('Email is invalid').required('You must enter your email'),\n        password: Yup.string().required('You must enter your password'),\n    })\n\n    function onSubmit({ email, password }) {\n        dispatch(login({ email, password }))\n    }\n\n    function onRegisterClicked() {\n        navigate('/account/register')\n    }\n\n    function onForgotPasswordClicked() {\n        navigate('/account/forgot-password')\n    }\n\n    return (\n        <>\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n                {({ errors, touched }) => (\n                    <Form>\n                        <h3 className=\"card-header\">Log in</h3>\n                        <div className=\"card-body\">\n                            <p>\n                            If you are new to the Incentive Program, please navigate to the<br /> registration page by using the Register button below.\n                            </p>\n                            <div className=\"form-group\">\n                                {/* <label>Email</label> */}\n                                <Field\n                                    name=\"email\"\n                                    type=\"text\"\n                                    placeholder=\"Enter email*\"\n                                    className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')}\n                                />\n                                <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group right-inner-addon\">\n                                {/* <label>Password</label> */}\n                                <Field\n                                    name=\"password\"\n                                    type=\"password\"\n                                    value=\"Enter password*\"\n                                    className={\n                                        'form-control' + (errors.password && touched.password ? ' is-invalid' : '')\n                                    }\n                                    component={PasswordShowHide}\n                                />\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-row\">\n                                <div className=\"form-group\">\n                                    <button type=\"submit\" className=\"btn btn-primary mt-4 mb-4\">\n                                        Log in\n                                    </button>\n                                    <button onClick={onRegisterClicked} className=\"btn btn-outline-primary\">\n                                        Register\n                                    </button>\n                                </div>\n                                <div className=\"form-group\">\n                                    <button\n                                        onClick={onForgotPasswordClicked}\n                                        className=\"btn btn-link\"\n                                    >\n                                        Forgot Password?\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport { Login }\n","import React, { Fragment } from 'react'\nimport { createRef, useState } from 'react'\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\nimport { useNavigate, useSearchParams } from 'react-router-dom'\nimport * as Yup from 'yup'\nimport { register, verifyNumber, selectPhone } from './account.slice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IntlTelInput from 'react-intl-tel-input'\nimport 'react-intl-tel-input/dist/main.css';\nimport Cookies from 'js-cookie'\n// import PasswordShowHide from \"./components/PasswordShowHide\";\n\nconst ReCAPTCHA_KEY = \"6LcnZyMeAAAAALZe_O94rv_tKY-qlbtkSqY67cJz\";\n\nfunction Register() {\n    const _reCaptchaRef = createRef();\n    const verifiedPhone = useSelector(selectPhone)\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [showHidePassword, changeShowHidePassword] = useState(false);\n    const passShowIcon = !showHidePassword ? \"icon-on\" : \"icon-off\"\n\n    if (searchParams.get(\"inviteCode\")) {\n        Cookies.set('inviteCode', searchParams.get(\"inviteCode\"), { expires: 9 })\n    }\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const initialValues = {\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phoneNumber: '',\n        phonePrefix: '',\n        phoneVerifyCode: '',\n        inviteCode: Cookies.get('inviteCode') || '',\n    }\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().trim().email('Email is invalid').required('You must enter email'),\n        confirmEmail: Yup.string()\n        .oneOf([Yup.ref('email'), null], 'Your email does not match')\n        .required('Confirm email is required'),\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('You must enter a password'),\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'Your password does not match')\n            .required('Confirm password is required'),\n        phoneVerifyCode: Yup.string().trim().required('You must enter your verification code'),\n        inviteCode: Yup.string().trim().matches(/^\\w+$/, 'Invite Code must contain alphabet and digit characters')\n            .length(8, 'Invite Code must be 8 characters')\n            .uppercase()\n            .nullable()\n            .optional(),\n    })\n\n    // generate a prefix\n    // with leading 0s removed\n    // and a + sign at the beginning\n    const generatePrefix = (prefixString) => {\n        const integerPrefix = parseInt(prefixString, 10)\n        const prefix = integerPrefix.toString()\n        return `+${prefix}`\n    }\n\n    const onVerifyClicked = (fields) => () => {\n        const cleaned = generatePrefix(fields.phonePrefix)\n        const fullNumber = `${cleaned}${fields.phoneNumber}`\n        dispatch(verifyNumber(fullNumber))\n    }\n\n    function onSubmit(fields) {\n        // back end removes 0s and adds '+' so we can leave prefix as is\n        dispatch(register(fields))\n    }\n\n    function onCancelClicked() {\n\n        navigate('/account/login')\n    }\n\n    const executeReCaptcha = (values, props) => {\n        _reCaptchaRef.current.execute();\n    };\n\n    const formatPhoneNumberOutput = (\n        isValid,\n        newNumber,\n        countryData,\n        fullNumber,\n        isExtension,\n    ) => {\n        if (fullNumber) {\n            return newNumber.replace(/(\\s|-)/g, '');\n        }\n        return '';\n    }\n\n    const formatPhonePrefixOutput = (selectedCountryData) => {\n        if (selectedCountryData) {\n            return selectedCountryData.dialCode;\n        }\n        return '';\n    }\n\n    return (\n      <>\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n            {({ errors, touched, values, setFieldValue, setFieldError, validateForm }) => (\n                <Form>\n                    <h3 className=\"card-header\">Register for the Incentive Program</h3>\n                    <div className=\"card-body\">\n                        <p>\n                        Welcome to Minima—a cooperative network that enables everyone to freely connect and prosper.\n                        </p>\n                        <p>\n                        Our Incentive Program is designed to reward you for helping to build the network by running a Minima node until Mainnet launch. \n                        </p>\n\n                        <p>If you would like to find out more, go to:<br /> <a href=\"https://www.minima.global/get-involved\" target=\"blank\">https://www.minima.global/get-involved</a></p>\n                    <div className=\"form-row\">\n                        <div className=\"form-group\">\n                            <label>Enter phone number</label>\n                                    <Field\n                                        name=\"phoneNumber\"\n                                        render={({ field, form: { errors, isSubmitting, touched, setFieldTouched, setFieldValue } }) => {\n                                            return (\n                                                <Fragment>\n                                                    <IntlTelInput\n\n                                                        defaultCountry={'us'}\n                                                        defaultValue={field.value}\n                                                        fieldId={\"phoneNumber\"}\n                                                        fieldName={\"phoneNumber\"}\n                                                        onPhoneNumberBlur={(isValid) => {\n                                                            setFieldTouched(\"phoneNumber\", true);\n                                                        }}\n                                                        autoHideDialCode={true}\n                                                        separateDialCode={true}\n                                                        // nationalMode={true}\n\n                                                        inputClassName={\n                                                            'form-control' +\n                                                            (values.phoneNumberValid != \"true\" && touched.phoneNumber ? ' is-invalid' : '')\n                                                        }\n                                                        onSelectFlag={(...args) => {\n                                                            setFieldValue(\"phonePrefix\", formatPhonePrefixOutput(args[1]));\n                                                            console.log(args)\n                                                            if (args[3]) { //isValid\n                                                                setFieldValue(\"phoneNumberValid\", \"true\");\n                                                            } else {\n                                                                setFieldValue(\"phoneNumberValid\", \"false\");\n\n                                                            }\n                                                        }}\n\n                                                        onPhoneNumberChange={(...args) => {\n                                                            setFieldValue(\"phoneNumber\", formatPhoneNumberOutput(...args));\n                                                            setFieldValue(\"phonePrefix\", formatPhonePrefixOutput(args[2]));\n\n                                                            if (args[0]) { //isValid\n                                                                setFieldValue(\"phoneNumberValid\", \"true\");\n                                                            } else {\n                                                                setFieldValue(\"phoneNumberValid\", \"false\");\n                                                            }\n                                                        }}\n                                                        preferredCountries={['us', 'ru', 'ua', 'by', 'tr', 'cn']}\n                                                    />\n                                                </Fragment>\n                                            );\n                                        }}\n                                    />\n                                    {values.phoneNumberValid != \"true\" && touched.phoneNumber ? (<div className='invalid-feedback' style={{ display: 'block' }}>\n                                        {\"Could not send a verification code to \"}{verifiedPhone}{\". Please make sure to select your correct country code & remove the initial 0 from the phone number field.\"}</div>) : null}\n                                        \n                        </div>\n                        <div className=\"form-group mb-0\">\n                            <button\n                                // onMouseOver={(e) => executeReCaptcha()} \n                                onClick={onVerifyClicked(values)}\n                                type=\"button\"\n                                className=\"btn btn-link get-otp\"\n                            >\n                                {'Send verification code'}\n                            </button>\n                        </div>\n                        <div className=\"form-group warning-msg mt-0\">\n                                <strong>The Incentive Program has a one node per person policy.</strong> Minima uses your phone number to verify you are only trying to set up one account. \n                        </div>\n                        <div className=\"form-group\">\n                            <Field\n                                name=\"phoneVerifyCode\"\n                                type=\"text\"\n                                placeholder=\"Enter verification code*\"\n                                className={\n                                    'form-control' +\n                                    (errors.phoneVerifyCode && touched.phoneVerifyCode ? ' is-invalid' : '')\n                                }\n                            />\n                            <ErrorMessage name=\"phoneVerifyCode\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                       \n                        <div className=\"form-group\">\n                            <Field\n                                name=\"email\"\n                                type=\"text\"\n                                placeholder=\"Enter email*\"\n                                className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')}\n                                onPaste={(e) => {\n                                  e.preventDefault();\n                                  return false;\n                                }}\n                                onCopy={(e) => {\n                                  e.preventDefault();\n                                  return false;\n                                }}\n                            />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <Field\n                                name=\"confirmEmail\"\n                                type=\"text\"\n                                placeholder=\"Confirm email*\"\n                                className={'form-control' + (errors.confirmEmail && touched.confirmEmail ? ' is-invalid' : '')}\n                                onPaste={(e) => {\n                                  e.preventDefault();\n                                  return false;\n                                }}\n                                onCopy={(e) => {\n                                  e.preventDefault();\n                                  return false;\n                                }}\n                            />\n                            <ErrorMessage name=\"confirmEmail\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n\n                        <div className=\"form-group right-inner-addon\">\n                            <i\n                              className={errors.password && touched.password ? \"\" : passShowIcon}\n                              onClick={() => changeShowHidePassword(!showHidePassword)}\n                            > \n                            </i>\n                            <Field\n                                name=\"password\"\n                                placeholder=\"Enter password*\"\n                                type={showHidePassword ? \"text\" : \"password\"}\n                                className={\n                                    'form-control' + (errors.password && touched.password ? ' is-invalid' : '')\n                                }\n                                // component={PasswordShowHide}\n                            />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n\n                        <div className=\"form-group right-inner-addon\">\n                            <Field\n                                name=\"confirmPassword\"\n                                placeholder=\"Confirm password*\"\n                                type={showHidePassword ? \"text\" : \"password\"}\n                                className={\n                                    'form-control' +\n                                    (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')\n                                }                              \n                                // component={PasswordShowHide}\n                            />\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <Field\n                                name=\"inviteCode\"\n                                type=\"text\"\n                                placeholder=\"Enter Invite Code (optional)\"\n                                className={\n                                    'form-control' +\n                                    (errors.inviteCode && touched.inviteCode ? ' is-invalid' : '')\n                                }\n                            />\n                            <ErrorMessage name=\"inviteCode\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-4\">\n                        <ReCAPTCHA\n                            ref={_reCaptchaRef}\n                            sitekey={ReCAPTCHA_KEY}\n                            onChange={(value) => {\n                                setFieldValue(\"recaptcha\", value);\n                            }}\n                            size=\"invisible\"\n                        />\n                        <div className=\"form-group\">\n                            <button type=\"submit\" onMouseOver={(e) => executeReCaptcha()} className=\"btn btn-primary\" disabled={Object.keys(errors).length > 0 || values.phoneNumberValid !== \"true\"}>\n                                Register\n                            </button>\n                        </div>\n                        <div className=\"form-group\">\n                            <button onClick={onCancelClicked} className=\"btn btn-link\">\n                                Log in\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                </Form>\n            )}\n        </Formik>\n        </>\n    )\n}\n\nexport { Register }\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useSearchParams, useNavigate, Navigate } from 'react-router-dom'\nimport { registrationVerifyEmail, selectRegistrationComplete, setMessage } from './account.slice'\n\nfunction RegistratonVerifyEmail() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    let [searchParams, setSearchParams] = useSearchParams()\n\n    const registrationComplete = useSelector(selectRegistrationComplete)\n\n    let token = searchParams.get('token')\n\n    useEffect(() => {\n        dispatch(registrationVerifyEmail(token))\n    }, [dispatch, token])\n\n    function onForgotPasswordClicked() {\n        navigate('/account/forgot-password')\n    }\n\n    if (registrationComplete) {\n        return <Navigate to=\"/account/login\" />\n    } else {\n        return (\n            <div>\n                <h3 className=\"card-header\">Verify Email</h3>\n                <div className=\"card-body\">\n                    <div>\n                        Verification failed, you can also verify your account using the{' '}\n                        <button onClick={onForgotPasswordClicked} className=\"btn btn-link\">\n                            forgot password\n                        </button>{' '}\n                        page.\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { RegistratonVerifyEmail }\n","import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\nimport { useDispatch } from 'react-redux'\nimport { setMessage, passwordResetEmail } from './account.slice'\n\nfunction ForgotPassword() {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const initialValues = {\n        email: '',\n    }\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().trim().email('Email address is invalid').required('You must enter your email'),\n    })\n\n    function onSubmit({ email }) {\n        dispatch(passwordResetEmail(email))\n    }\n\n    function onCancelClicked() {\n        navigate('/account/login')\n    }\n\n    return (\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n            {({ errors, touched }) => (\n                <Form>\n                    <h3 className=\"card-header\">Forgot Password</h3>\n                    <div className=\"card-body\">\n                        <p>\n                        Please check your junk mail if an email does not arrive in your inbox.\n                        </p>\n                        <p>\n                        To avoid emails from Minima landing in spam, save community@minima.global as a contact in your email client.\n                        </p>\n                        <div className=\"form-group\">\n                            <Field\n                                name=\"email\"\n                                type=\"text\"\n                                placeholder=\"Enter email*\"\n                                className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')}\n                            />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-row\">\n                            <div className=\"form-group\">\n                                <button type=\"submit\" className=\"btn btn-primary mt-4 mb-4\">\n                                    Submit\n                                </button>\n                                <button onClick={onCancelClicked} className=\"btn btn-outline-primary\">\n                                    Cancel\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport { ForgotPassword }\n","import React from 'react'\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\nimport { useNavigate } from 'react-router-dom'\nimport * as Yup from 'yup'\nimport { useDispatch } from 'react-redux'\nimport { passwordReset, setMessage } from './../account.slice'\n\nfunction PasswordReset({ resetToken }) {\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const initialValues = {\n        password: '',\n        confirmPassword: '',\n    }\n\n    const validationSchema = Yup.object().shape({\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\n            .required('Confirm Password is required'),\n    })\n\n    function onSubmit({ password, confirmPassword }) {\n        dispatch(passwordReset({ resetToken, password, confirmPassword }))\n    }\n\n    function onCancelClicked() {\n        navigate('/account/login')\n    }\n\n    return (\n        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n            {({ errors, touched }) => (\n                <Form>\n                    <div className=\"form-group\">\n                        <label>Password</label>\n                        <Field\n                            name=\"password\"\n                            type=\"password\"\n                            className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')}\n                        />\n                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Confirm Password</label>\n                        <Field\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            className={\n                                'form-control' +\n                                (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')\n                            }\n                        />\n                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col\">\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Reset Password\n                            </button>\n                            <button onClick={onCancelClicked} className=\"btn btn-link\">\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default PasswordReset\n","import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { setMessage } from './../account.slice'\n\nfunction InvalidToken() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    function onForgotPasswordClicked() {\n        navigate('/account/forgot-password')\n    }\n\n    return (\n        <div>\n            Token validation failed, if the token has expired you can get a new one at the{' '}\n            <button onClick={onForgotPasswordClicked} className=\"btn btn-link\">\n                forgot password\n            </button>{' '}\n            page.\n        </div>\n    )\n}\n\nexport default InvalidToken\n","import React, { useEffect } from 'react'\nimport { useSearchParams, Navigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { passwordResetValidate, selectPasswordResetTokenValid, selectPasswordResetComplete } from './../account.slice'\nimport PasswordReset from './PasswordReset'\nimport InvalidToken from './InvalidToken'\n\nfunction PasswordResetContainer() {\n    const dispatch = useDispatch()\n\n    let [searchParams, setSearchParams] = useSearchParams()\n\n    const validToken = useSelector(selectPasswordResetTokenValid)\n    const passwordResetComplete = useSelector(selectPasswordResetComplete)\n\n    let token = searchParams.get('token')\n\n    useEffect(() => {\n        dispatch(passwordResetValidate(token))\n    }, [dispatch, token])\n\n    if (passwordResetComplete) {\n        return <Navigate to=\"/account/login\" />\n    } else {\n        return (\n            <div>\n                <h3 className=\"card-header\">Reset Password</h3>\n                <div className=\"card-body\">\n                    {validToken ? <PasswordReset resetToken={token}></PasswordReset> : <InvalidToken></InvalidToken>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PasswordResetContainer\n","export default __webpack_public_path__ + \"static/media/minima_logo_white.76b44475.svg\";","export default __webpack_public_path__ + \"static/media/minima_logo.f132ac6f.svg\";","import React from \"react\";\r\nimport LogoLight2x from \"../../images/minima_logo_white.svg\";\r\nimport LogoDark2x from \"../../images/minima_logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AccountLogo = () => {\r\n  return (\r\n    <Link to={`${process.env.PUBLIC_URL}/`} className=\"logo-link\">\r\n      <img className=\"logo-light logo-img\" src={LogoLight2x} alt=\"logo\" />\r\n      <img className=\"logo-dark logo-img\" src={LogoDark2x} alt=\"logo\" />\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default AccountLogo;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport AccountLogo from \"../layout/AccountLogo\";\r\n\r\nconst AccountHeader = () => {\r\n\r\n  const headerClass = classNames({\r\n    \"mn-header\": true,\r\n    \"mn-header-fixed\": true,\r\n    \"bg-white\": true,\r\n  });\r\n  return (\r\n    <>\r\n    <div className={headerClass}>\r\n      <div className=\"container-lg wide-xl\">\r\n        <div className=\"mn-header-wrap\">\r\n          <div className=\"mn-header-brand\">\r\n            <AccountLogo />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"mn-header-line\">\r\n        <div className=\"container-lg wide-xl\">\r\n          The Minima Incentive Program\r\n        </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\nexport default AccountHeader;\r\n","import React from \"react\";\r\n\r\nconst AccountFooter = () => {\r\n  return (\r\n    <div className=\"mn-footer mn-auth-footer-full\">\r\n      <div className=\"container wide-xl\">\r\n        <div className=\"mn-footer-wrap\">\r\n          <div className=\"mn-footer-slogan\">\r\n                The evolution will not be centralized.<br />\r\n                <span>Become part of it.</span>\r\n          </div>\r\n          <div className=\"mn-footer-bottom\">\r\n            <div className=\"mn-footer-links\">\r\n              <ul className=\"nav nav-sm\">\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/incentiveprogramtermsandconditions/applicationoftheseterms\" target=\"blank\"className=\"nav-link\">\r\n                    Incentive Program Terms & Conditions\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/minimatermsandconditions\" target=\"blank\"className=\"nav-link\">\r\n                    Minima Terms & Conditions\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/minimaprivacypolicy\" target=\"blank\"className=\"nav-link\">\r\n                    Privacy Policy\r\n                    </a>\r\n                  </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"mn-footer-copyright in.visible\">\r\n            All rights reserved Minima Global Ltd &copy;2022.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default AccountFooter;\r\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectMessage, selectPhone} from './account.slice'\n\nfunction AccountMessage() {\n    const message = useSelector(selectMessage)\n    const phone = useSelector(selectPhone)\n    console.log(message + \" \" + phone);\n\n    return message ? (\n        <div className=\"alert alert-info\" style={{ textAlign: 'center' }} role=\"alert\">\n            {message}\n        </div>\n    ) : (\n        <div />\n    )\n}\n\nexport default AccountMessage\n","import React, { useEffect, useState } from 'react'\nimport { Outlet, Navigate } from 'react-router-dom'\nimport AccountHeader from \"./layout/AccountHeader\";\nimport AccountFooter from \"./layout/AccountFooter\";\nimport AccountMessage from './AccountMessage'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectLoggedIn, setMessage } from './account.slice'\n\n\nfunction AccountLayout() {\n    const dispatch = useDispatch()\n\n    // similar but opposite check to one done in MainLayout\n    // will stop the user entering any of the account pages if they are logged in\n    const loggedIn = useSelector(selectLoggedIn)\n    if (loggedIn) {\n        dispatch(setMessage(''))\n        return <Navigate to=\"/\" replace=\"true\" />\n    } else {\n        return accountPages()\n    }\n}\n\nfunction accountPages() {\n    return (\n        <>\n            <AccountHeader />\n            <div className=\"mn-content container-fluid\">\n                <div className=\"card\">\n                    <AccountMessage></AccountMessage>\n                    <Outlet></Outlet>\n                </div>\n            </div>\n            <AccountFooter />\n        </>\n    )\n}\n\nexport default AccountLayout\n","import React from \"react\";\r\nimport LogoLight2x from \"../images/minima_logo_white.svg\";\r\nimport LogoDark2x from \"../images/minima_logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <Link to={`${process.env.PUBLIC_URL}/`} className=\"logo-link\">\r\n      <img className=\"logo-light logo-img\" src={LogoLight2x} alt=\"logo\" />\r\n      <img className=\"logo-dark logo-img\" src={LogoDark2x} alt=\"logo\" />\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import { useEffect, useState } from \"react\";\n\nconst useMountTransition = (isMounted, unmountDelay) => {\n  const [hasTransitionedIn, setHasTransitionedIn] = useState(false);\n\n  useEffect(() => {\n    let timeoutId;\n\n    if (isMounted && !hasTransitionedIn) {\n      setHasTransitionedIn(true);\n    } else if (!isMounted && hasTransitionedIn) {\n      timeoutId = setTimeout(() => setHasTransitionedIn(false), unmountDelay);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [unmountDelay, isMounted, hasTransitionedIn]);\n\n  return hasTransitionedIn;\n};\n\nexport default useMountTransition;\n","import React, {useState, useEffect} from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux'\r\nimport { logout } from '../account/account.slice'\r\nimport useMountTransition from \"./useMountTransition\";\r\n\r\nfunction NavMain() {\r\n\r\n    const [isMounted, setIsMounted] = useState(false);\r\n    const hasTransitionedIn = useMountTransition(isMounted, 1000);\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    function onLogoutClicked() {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const toggleNav = () => {\r\n      setIsMounted(!isMounted);\r\n    }\r\n  \r\n    useEffect(() => {\r\n\r\n      setIsMounted(false)\r\n  \r\n      const changeWidth = () => {\r\n        setScreenWidth(window.innerWidth);\r\n        setIsMounted(false);\r\n      }\r\n\r\n      window.addEventListener('resize', changeWidth)\r\n  \r\n      return () => {\r\n          window.removeEventListener('resize', changeWidth)\r\n      }\r\n  \r\n    }, [])\r\n\r\n    return (\r\n\r\n            <>\r\n            <div className=\"mn-header-menu\">\r\n              {(hasTransitionedIn || isMounted || screenWidth > 992) && (\r\n                  <ul className={`mn-menu mn-menu-main ${hasTransitionedIn && \"in\"} ${isMounted && \"visible\"}`}>\r\n                      <li className=\"mn-menu-item\">\r\n                          <NavLink onClick={toggleNav} to={`${process.env.PUBLIC_URL}/home/pages/get-started`} className=\"mn-menu-link\">Get Started</NavLink>                     \r\n                      </li>\r\n                      <li className=\"mn-menu-item\">\r\n                          <NavLink onClick={toggleNav} to={`${process.env.PUBLIC_URL}/home/pages/incentiveid`} className=\"mn-menu-link\">Incentive ID</NavLink>\r\n                      </li>\r\n                      <li className=\"mn-menu-item\">\r\n                          <NavLink onClick={toggleNav} to={`${process.env.PUBLIC_URL}/home/pages/rewards`} className=\"mn-menu-link\">Rewards</NavLink>\r\n                      </li>\r\n                      <li className=\"mn-menu-item\">\r\n                          <NavLink onClick={toggleNav} to={`${process.env.PUBLIC_URL}/home/pages/invite-link`} className=\"mn-menu-link\">Invite Link</NavLink>\r\n                      </li>\r\n                  </ul>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"mn-header-tools\">\r\n                  <ul className=\"mn-quick-nav\">\r\n                    <li>\r\n                        <div onClick={onLogoutClicked} className=\"mn-quick-item log-out\"></div>\r\n                    </li>    \r\n                    <li className=\"d-lg-none\">\r\n                        <div onClick={toggleNav} className=\"mn-quick-item mobile-nav\"></div>\r\n                    </li>               \r\n                  </ul>\r\n            </div>     \r\n            </>\r\n    )\r\n}\r\n\r\nexport default NavMain\r\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport { fetchWrapper } from '../_helpers'\nimport { logout } from './../account/account.slice'\nimport { startSpinner, stopSpinner } from '../app/spinner/spinner.slice'\n\nexport const getNodeId = () => (dispatch, getState) => {\n    dispatch(startSpinner())\n    fetchWrapper.get(`/api/node-id`).then(\n        (data) => {\n            dispatch(setNodeId(data))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            dispatch(logOutIfUnauthorised(status))\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const getRewards = () => (dispatch, getState) => {\n    dispatch(startSpinner())\n    fetchWrapper.get(`/api/rewards`).then(\n        (data) => {\n            dispatch(setInviteCode(data.inviteCode))\n            dispatch(setDailyRewards(data.rewards.dailyRewards)) // {dailyRewards, previousRewards, lastPing}\n            dispatch(setPreviousRewards(data.rewards.previousRewards))\n            dispatch(setInviterRewards(data.rewards.inviterRewards))\n            dispatch(setLastPing(data.lastPing))\n            dispatch(stopSpinner())\n        },\n        ({ error, status }) => {\n            dispatch(logOutIfUnauthorised(status)) // TODO why does this sometimes fail?\n            dispatch(stopSpinner())\n        }\n    )\n}\n\nexport const logOutIfUnauthorised = (status) => (dispatch, getState) => {\n    if ([401, 403].includes(status)) {\n        dispatch(logout())\n    }\n}\n\nexport const homeSlice = createSlice({\n    name: 'home',\n    initialState: {\n        nodeId: '337812371289371289371289',\n        inviteCode: '33781237128937128',\n        dailyRewards: 50,\n        previousRewards: 10,\n        inviterRewards: 15,\n        lastPing: null,\n    },\n    reducers: {\n        setNodeId: (state, action) => {\n            state.nodeId = action.payload\n        },\n        setInviteCode: (state, action) => {\n            state.inviteCode = action.payload\n        },\n        setDailyRewards: (state, action) => {\n            state.dailyRewards = action.payload\n        },\n        setPreviousRewards: (state, action) => {\n            state.previousRewards = action.payload\n        },\n        setInviterRewards: (state, action) => {\n            state.inviterRewards = action.payload\n        },\n        setLastPing: (state, action) => {\n            state.lastPing = action.payload\n        },\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const {\n    setNodeId,\n    setInviteCode,\n    setDailyRewards,\n    setPreviousRewards,\n    setInviterRewards,\n    setLastPing,\n} = homeSlice.actions\n\nexport default homeSlice.reducer\n\n///// selectors\nconst selectHome = (state) => state.home\nexport const selectNodeId = createSelector(selectHome, (state) => state.nodeId)\nexport const selectInviteCode = createSelector(selectHome, (state) => state.inviteCode)\nexport const selectDailyRewards = createSelector(selectHome, (state) => state.dailyRewards)\nexport const selectPreviousRewards = createSelector(selectHome, (state) => state.previousRewards)\nexport const selectInviterRewards = createSelector(selectHome, (state) => state.inviterRewards)\nexport const selectLastPing = createSelector(selectHome, (state) => state.lastPing)\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport Logo from \"./Logo\";\r\nimport NavMain from '../_components/NavMain'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n  selectLastPing,\r\n} from '../home/home.slice'\r\n\r\nconst options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit', timeZoneName: 'short' };\r\n\r\nconst Header = () => {\r\n\r\n  const lastPing = useSelector(selectLastPing) // can be null\r\n\r\n  const headerClass = classNames({\r\n    \"mn-header\": true,\r\n    \"mn-header-fixed\": true,\r\n    \"bg-white\": true,\r\n  });\r\n  return (\r\n    <>\r\n    <div className={headerClass}>\r\n      <div className=\"container-lg wide-xl\">\r\n        <div className=\"mn-header-wrap\">\r\n          <div className=\"mn-header-brand\">\r\n            <Logo />\r\n          </div>\r\n            <NavMain />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"mn-header-line\">\r\n        <div className=\"container-lg wide-xl\">\r\n          The Minima Incentive Program\r\n        </div>\r\n    </div>\r\n    <div className=\"mn-header-ping\">\r\n        <div className=\"container-lg wide-xl\">\r\n          Last ping: <strong>{lastPing ? new Date(lastPing).toLocaleString(undefined, options) : '...'} { }</strong>\r\n        </div>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"mn-footer mn-auth-footer-full\">\r\n      <div className=\"container wide-xl\">\r\n        <div className=\"mn-footer-wrap\">\r\n            <div className=\"mn-footer-slogan\">\r\n                  The evolution will not be centralized.<br />\r\n                  <span>Become part of it.</span>\r\n            </div>\r\n            <div className=\"mn-footer-bottom\">\r\n              <div className=\"mn-footer-links\">\r\n                <ul className=\"nav nav-sm\">\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/incentiveprogramtermsandconditions/applicationoftheseterms\" target=\"blank\"className=\"nav-link\">\r\n                    Incentive Program Terms & Conditions\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/minimatermsandconditions\" target=\"blank\"className=\"nav-link\">\r\n                    Minima Terms & Conditions\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <a href=\"https://docs.minima.global/docs/minimaprivacypolicy\" target=\"blank\"className=\"nav-link\">\r\n                    Privacy Policy\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"mn-footer-copyright\">\r\n                All rights reserved Minima Global Ltd &copy;2022.\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React from 'react'\nimport { Outlet, Navigate } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { selectLoggedIn } from './../account/account.slice'\nimport Header from \"../layout/Header\";\nimport Footer from \"../layout/Footer\";\n\n\nfunction MainLayout() {\n    // similar but opposite check to one done in AccountLayout\n    // will stop the user entering any of the main pages if they are not logged in\n    const loggedIn = useSelector(selectLoggedIn)\n    if (loggedIn) {\n        return (\n            <>\n            <Header />\n            <div className=\"mn-content container-fluid\">\n                <div className=\"card\">\n                    <Outlet />\n                </div>\n            </div>\n            <Footer />\n            </>\n        )\n    } else {\n        return <Navigate to=\"/account/login\" replace=\"true\" />\n    }\n}\n\nexport default MainLayout\n","import React, { useEffect, useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\n\nfunction GetStarted() {\n    const navigate = useNavigate()\n\n    function onHandleClickAndroid() {\n        navigate('../home/pages/get-started-android')\n    }\n    function onHandleClickWindows() {\n        navigate('../home/pages/get-started-windows')\n    }\n    function onHandleClickMac() {\n        navigate('../home/pages/get-started-mac')\n    }\n    function onHandleClickLinux() {\n        navigate('../home/pages/get-started-linux')\n    }\n    function onHandleClickVPS() {\n        navigate('../home/pages/get-started-linuxvps')\n    }\n\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [])\n\n    return (\n        <>\n            <h3 className=\"card-header\">Get Started</h3>\n            <div className=\"card-body\">\n                <p>\n                Choose your device from the list below<br /> and follow the instructions for set-up.\n                </p>\n                <div className=\"form-row\">\n                    <div className='form-group'>\n                        <button onClick={onHandleClickAndroid} className=\"btn btn-outline-dark mt-4 mb-4\">\n                        Android \n                        </button>\n                        <button onClick={onHandleClickWindows} className=\"btn btn-outline-dark mb-4\">\n                        Windows\n                        </button>\n                        <button onClick={onHandleClickMac} className=\"btn btn-outline-dark mb-4\">\n                        Mac\n                        </button>\n                        <button onClick={onHandleClickLinux} className=\"btn btn-outline-dark mb-4\">\n                        Linux Desktop \n                        </button>\n                        <button onClick={onHandleClickVPS} className=\"btn btn-outline-dark mb-4\">\n                        Linux VPS/Raspberry Pi\n                        </button>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport { GetStarted }\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from './../home.slice'\n\n\nfunction GetStartedAndroid() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n        window.scrollTo(0, 0);\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n        window.scrollTo(0, 0);\n    }\n\n    function handleClick(){\n      window.open(\"https://github.com/minima-global/Minima/raw/master/jar/minima-0.100.32.apk\");\n    }\n\n    return (\n        <>\n            <h3 className=\"card-header\">Android</h3>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className='form-group tab-row'>\n                        <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Node Set-up\n                        </button>\n                        <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Incentive Set-up\n                        </button>\n                    </div>    \n                </div>  \n                <div className=\"form-row\">\n                    { showContentOne ? \n                        <div className='form-group'>\n                            <h4>Steps</h4>\n                                <p><span>1.</span>If you are viewing this on a desktop, navigate to your Android device and sign back in to incentive.minima.global</p>\n                                <p><span>2.</span>Download the latest version of the Minima app using the button below.</p>\n                                <p><span>3.</span>Press install and follow the on-screen instructions.</p>\n                                <p><span>4.</span>Press the Next Step button below to set up your Incentive ID.</p>\n                            <button onClick={handleClick} type=\"submit\" className=\"btn btn-primary mb-4 mt-2\">\n                            Download Minima\n                            </button>\n                            <button type=\"submit\" onClick={handleContentTwo} className=\"btn btn-outline-primary\">\n                            Next Step\n                            </button>\n                        </div> :  \"\" } \n                    { showContentTwo ?                       \n                        <div className='form-group'>\n                            <h4>Steps</h4>\n                                <p><span>1.</span>Copy your Incentive ID found below. </p>\n                                <p><span>2.</span>Navigate to the Incentive Program page in the Minima app and paste it in the Incentive ID field.</p>\n                                <label><strong>Incentive ID</strong></label>\n                                <input className='form-control mb-4'\n                                    name=\"id\"\n                                    type=\"text\"\n                                    defaultValue={nodeId}\n\n                                />\n                            <button type=\"submit\" onClick={() => {\n                                        navigator.clipboard.writeText(nodeId)\n                                        setNodeIdCopied(true)\n                                        setTimeout(() => {\n                                          setNodeIdCopied(false)\n                                        }, 2000);\n                                    }}\n                                    className=\"btn btn-primary mt-2\">\n                                {nodeIdCopied ? 'Copied' : 'Copy'}\n                            </button>\n                        </div>  : \"\" }  \n                </div>\n            </div>\n        </>\n    )\n}\n\nexport { GetStartedAndroid }\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from '../home.slice'\n\n\nfunction GetStartedWindows() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n        window.scrollTo(0, 0);\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n        window.scrollTo(0, 0);\n    }\n\n    function handleClick(){\n        window.open(\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\");\n    }\n\n    return (\n        <>\n            <h3 className=\"card-header\">Windows</h3>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className='form-group tab-row'>\n                        <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Node Set-up\n                        </button>\n                        <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Incentive Set-up\n                        </button>\n                    </div>    \n                </div>  \n                <div className=\"form-row\">\n                    { showContentOne ? \n                        <div className='form-group'>\n                            <h4>Note:</h4>\n                            <p>If you have not run Minima before, please ensure you have the latest version of Java installed on the server: <a href=\"https://java.com/en/\" target=\"_blank\">https://java.com/en/</a>  </p>\n\n                            <h4>Instructions:</h4>\n                                <p><span>1.</span>If you have a previous version of Minima running, type <span className='codeline'>quit</span> into the Command prompt window, then replace your existing minima.jar file with the latest version.</p>\n                                <p><span>2.</span>Download and save the latest Minima JAR from here: <a href=\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\">minima.jar</a></p>\n                                <p><span>3.</span>Open the Command Prompt as Admin. When it opens, type the following: (including a space after -jar)</p>\n                                <code>\n                                java -Xmx1G -jar \n                                </code>\n                                <ul>\n                                  <li>then drag and drop the minima.jar file into the command window,</li>\n                                  <li>then add a space and type <span className='codeline'>-rpcenable</span></li>\n                                </ul>\n                                <p>The output should look like the below (all on one line):</p>\n                                <code>\n                                java -Xmx1G -jar C:\\Users\\YourName\\minima.jar -rpcenable\n                                </code>\n                                <h4>Note:</h4>\n                                <p>When starting a new node or deleting your existing node data <span className='codeline'>-clean</span> can be added to the end. Do not use <span className='codeline'>-clean</span> if you are simply restarting your node. i.e</p>\n                                <code>\n                                java -Xmx1G -jar C:\\Users\\YourName\\minima.jar -rpcenable -clean\n                                </code>\n                                <p><span>4.</span>Hit the Enter key</p>\n                                <h4>Avoid:</h4>\n                                <ul>\n                                  <li>Closing your Command Prompt window</li>\n                                  <li>Allowing your PC to go to sleep</li>\n                                  <li>Turning your PC off</li>\n                                </ul>\n                                <p>If any of the above happens, your Minima node will stop running and you will need to repeat step 3 to start it again.</p>\n                                <button onClick={handleClick}className=\"btn btn-primary mb-4 mt-2\">\n                              Download Minima\n                            </button>\n                            <button type=\"submit\" onClick={handleContentTwo} className=\"btn btn-outline-primary\">\n                            Next Step\n                            </button>\n                        </div> :  \"\" } \n                    { showContentTwo ?                       \n                        <div className='form-group'>\n                            <h4>Steps:</h4>\n                                <p><span>1.</span>Once Minima is running, connect your Incentive account to your node by copying your Incentive ID from the bottom of this page and typing the following directly into the Terminal command line: </p>\n                                <code>\n                                incentivecash uid:InsertYourNodeID\n                                </code>\n                            <h4>Example:</h4>\n                                <code>\n                                incentivecash uid:00F3E50D-5A52-444B-8F1A-0DA72D6CAA84\n                                </code>\n                                <p>You should receive a return status of <span className='codeline'>true</span> and see your previous reward balance (if any). Your Incentive Program account is now connected to your node!</p>\n                                <p><span>2.</span>Your node will then ping us so we know it's running. </p>\n                                <p><span>3.</span>For every day your node pings us, we'll add 1 Reward to your DAILY REWARDS.</p>  \n                                <p><span>4.</span>To check your rewards, type <span className='codeline'>incentivecash</span> into the command line.</p>\n                                <p>Thank you for participating in the Minima Testnet!</p>\n                                <label><strong>Incentive ID</strong></label>\n                                <input className='form-control mb-4'\n                                    name=\"id\"\n                                    type=\"text\"\n                                    defaultValue={nodeId}\n\n                                />\n                            <button type=\"submit\" onClick={() => {\n                                        navigator.clipboard.writeText(nodeId)\n                                        setNodeIdCopied(true)\n                                        setTimeout(() => {\n                                          setNodeIdCopied(false)\n                                        }, 2000);\n                                    }}\n                                    className=\"btn btn-primary mt-2\">\n                                {nodeIdCopied ? 'Copied' : 'Copy'}\n                            </button>\n                        </div>  : \"\" }  \n                  </div>\n            </div>\n        </>\n    )\n}\n\nexport { GetStartedWindows }\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from '../home.slice'\n\n\nfunction GetStartedMac() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n        window.scrollTo(0, 0);\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n        window.scrollTo(0, 0);\n    }\n\n    // function handleClick(){\n    //     window.open(\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\");\n    // }\n\n    return (\n        <>\n        <h3 className=\"card-header\">Mac</h3>\n        <div className=\"card-body\">\n            <div className=\"form-row\">\n                <div className='form-group tab-row'>\n                    <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Node Set-up\n                    </button>\n                    <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Incentive Set-up\n                    </button>\n                </div>    \n            </div>  \n            <div className=\"form-row\">\n                { showContentOne ? \n                    <div className='form-group'>\n                        <h4>Note:</h4>\n                        <p>If you have not run Minima before, please ensure you have the latest version of Java installed: <a href=\"https://java.com/en/\" target=\"_blank\">https://java.com/en/</a> </p>\n\n                        <h4>Instructions:</h4>\n                            <p><span>1.</span>If you have a previous version of Minima running, type <span className='codeline'>quit</span> into the Terminal command line.</p>\n                            <p><span>2.</span>If you have not used Homebrew before, you will need to install it first:</p>\n                            <p> - Open a Terminal window</p>\n                            <p> - Copy and execute the following script to install Homebrew. Follow all on-screen instructions and provide your system password when required:</p>\n                            <code>\n                            /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n                            </code>\n                            <p><span>3.</span>Once Homebrew is installed, or if already installed, you can follow the following steps to install and configure your node - please ensure you provide your system password when prompted:</p>\n                            <code>\n                            brew tap minima-global/minima<br />\n                            brew install minima-global/minima/minima<br />\n                            brew services start minima</code>\n                            <p>Your Terminal will provide details of where your logs can be found, which you may need in the future. Please make a note of this location for future reference.</p>\n                            <h4>Note:</h4>\n                            <p>To update Minima to a new version:</p>\n                            <code>\n                            mcli quit<br />\n                            brew services stop minima<br />\n                            brew tap minima-global/minima<br />\n                            brew install minima-global/minima/minima<br />\n                            brew services start minima<br />\n                            </code>\n                            <p>Check your Incentive account is connected with </p>\n                            <code>mcli incentivecash</code>\n\n                            <p>Congratulations - your node is now installed & running! The last step is to connect it to your Incentive Account. Click Next Step to continue.</p>\n                        <button onClick={handleContentTwo} className=\"btn btn-outline-primary\">\n                        Next Step\n                        </button>\n                    </div> :  \"\" } \n                { showContentTwo ?                       \n                    <div className='form-group'>\n                        <h4>Steps:</h4>\n                            <p><span>1.</span>Once Minima is running, connect your Incentive account to your node, by copying your Incentive ID from the bottom of this page.</p>\n                            <p><span>2.</span>Run the following command in your Terminal, replacing xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx with the copied Node ID:</p>\n                            <code>\n                            mcli incentivecash uid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n                            </code>\n                        <h4>Example:</h4>\n                            <code>\n                            mcli incentivecash uid:00F3E50D-5A52-444B-8F1A-0DA72D6CAA84\n                            </code>\n                            <p>You should receive a return status of <span className='codeline'>true</span> and see your previous rewards balance (if any). </p>\n                            <p>Once this is done, your installation is complete and your Incentive account is connected to your node! You may close your Terminal Window. </p>\n                            <p><span>3.</span>Your node will then ping us so we know it's running</p>\n                            <p><span>4.</span>For every day your node pings us, we'll add 1 Reward to your DAILY REWARDS</p>\n                            <p><span>5.</span>To check your rewards, type <span className='codeline'>mcli incentivecash</span> into the Terminal</p>\n                            <label><strong>Incentive ID</strong></label>\n                            <input className='form-control mb-4'\n                                name=\"id\"\n                                type=\"text\"\n                                defaultValue={nodeId}\n\n                            />\n                        <button type=\"submit\" onClick={() => {\n                                    navigator.clipboard.writeText(nodeId)\n                                    setNodeIdCopied(true)\n                                    setTimeout(() => {\n                                      setNodeIdCopied(false)\n                                    }, 2000);\n                                }}\n                                className=\"btn btn-primary mt-2\">\n                            {nodeIdCopied ? 'Copied' : 'Copy'}\n                        </button>\n                    </div>  : \"\" }  \n              </div>\n        </div>\n    </>\n    )\n}\n\nexport { GetStartedMac }\n","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from '../home.slice'\n\n\nfunction GetStartedLinux() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n        window.scrollTo(0, 0);\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n        window.scrollTo(0, 0);\n    }\n\n    function handleClick(){\n        window.open(\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\");\n    }\n\n    return (\n        <>\n        <h3 className=\"card-header\">Linux Desktop</h3>\n        <div className=\"card-body\">\n            <div className=\"form-row\">\n                <div className='form-group tab-row'>\n                    <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Node Set-up\n                    </button>\n                    <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Incentive Set-up\n                    </button>\n                </div>    \n            </div>  \n            <div className=\"form-row\">\n                { showContentOne ? \n                    <div className='form-group'>\n                        <h4>Note:</h4>\n                        <p>If you are using Debian OS (including Ubuntu) or a Raspberry Pi, follow the instructions <Link to={`${process.env.PUBLIC_URL}/home/pages/get-started-linuxvps`}>here</Link></p>\n                        <p>If you have not run Minima before, please ensure you have the latest version of Java installed on the server: <a href=\"https://java.com/en/\" target=\"_blank\">https://java.com/en/</a> </p>\n\n                        <h4>Instructions:</h4>\n                            <p><span>1.</span>If you have a previous version of Minima running, type <span className='codeline'>quit</span> into the Command prompt window, then replace your existing minima.jar file with the latest version.</p>\n                            <p><span>2.</span>Download and save the latest Minima JAR from here: <a href=\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\">minima.jar</a></p>\n                            <p><span>3.</span>Open the Command Prompt as Admin. When it opens, type the following: (including a space after -jar)</p>\n                            <code>\n                            sudo java -Xmx1G -jar \n                            </code>\n                            <ul>\n                              <li>then drag and drop the minima.jar file into the command window, </li>\n                              <li>then add a space and type <span className='codeline'>-rpcenable</span></li>\n                            </ul>\n                            <p>The output should look like the below (all on one line):</p>\n                            <code>\n                            sudo java -Xmx1G -jar /home/user/minima.jar -rpcenable\n                            </code>\n                            <h4>Note:</h4>\n                            <p>When starting a new node or to delete your existing node data -clean can be added to the end. Do not use -clean if you are simply restarting your node. Example below:</p>\n                            <code>\n                            sudo java -Xmx1G -jar /home/user/minima.jar -rpcenable -clean\n                            </code>\n                            <p><span>4.</span>Hit the Enter key</p>\n                            <h4>Avoid:</h4>\n                            <ul>\n                              <li>Closing your Command Prompt window</li>\n                              <li>Allowing your PC to go to sleep</li>\n                              <li>Turning your PC off</li>\n                            </ul>\n                            <p>If any of the above happens, your Minima node will stop running and you will need to repeat step 3 to start it again.</p>\n                        <button onClick={handleClick}className=\"btn btn-primary mb-4 mt-2\">\n                        Download Minima\n                        </button>\n                        <button onClick={handleContentTwo} className=\"btn btn-outline-primary\">\n                        Next Step\n                        </button>\n                    </div> :  \"\" } \n                { showContentTwo ?                       \n                    <div className='form-group'>\n                        <h4>Steps:</h4>\n                            <p><span>1.</span>Once Minima is running, connect your Incentive account to your node by copying your Incentive ID from the bottom of this page and typing the following directly into the Terminal command line: </p>\n                            <code>\n                            incentivecash uid:InsertYourNodeID\n                            </code>\n                        <h4>Example:</h4>\n                            <code>\n                            incentivecash uid:00F3E50D-5A52-444B-8F1A-0DA72D6CAA84\n                            </code>\n                            <p>You should receive a return status of <span className='codeline'>true</span> and see your previous reward balance (if any). Your Incentive Program account is now connected to your node!</p>\n                            <p><span>2.</span>Your node will then ping us so we know it's running. </p>\n                            <p><span>3.</span>For every day your node pings us, we'll add 1 Reward to your DAILY REWARDS.</p>  \n                            <p><span>4.</span>To check your rewards, type <span className='codeline'>incentivecash</span> into the command line.</p>\n                            <p>Thank you for participating in the Minima Testnet!</p>\n                            <label><strong>Incentive ID</strong></label>\n                            <input className='form-control mb-4'\n                                name=\"id\"\n                                type=\"text\"\n                                defaultValue={nodeId}\n\n                            />\n                        <button type=\"submit\" onClick={() => {\n                                    navigator.clipboard.writeText(nodeId)\n                                    setNodeIdCopied(true)\n                                    setTimeout(() => {\n                                      setNodeIdCopied(false)\n                                    }, 2000);\n                                }}\n                                className=\"btn btn-primary mt-2\">\n                            {nodeIdCopied ? 'Copied' : 'Copy'}\n                        </button>\n                    </div>  : \"\" }  \n              </div>\n        </div>\n    </>\n    )\n}\n\nexport { GetStartedLinux }\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from '../home.slice'\n\n\nfunction GetStartedVPS() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n        window.scrollTo(0, 0);\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n        window.scrollTo(0, 0);\n    }\n\n    function handleClick(){\n        window.open(\"https://github.com/minima-global/Minima/raw/master/jar/minima.jar\");\n    }\n\n    return (\n        <>\n        <h3 className=\"card-header\">Linux VPS/Raspberry Pi</h3>\n        <div className=\"card-body\">\n            <div className=\"form-row\">\n                <div className='form-group tab-row'>\n                    <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Node Set-up\n                    </button>\n                    <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                        Incentive Set-up\n                    </button>\n                </div>    \n            </div>  \n            <div className=\"form-row\">\n                { showContentOne ? \n                    <div className='form-group'>\n                        <h4>Videos:</h4>\n                        <p>Set up the Minima Protocol on Linux Cloud Server:  <a href=\"https://www.youtube.com/watch?v=5ivW2Q69-Nc\" target=\"_blank\">https://www.youtube.com/watch?v=5ivW2Q69-Nc </a></p>\n                        <p>Interacting with the Minima Protocol on VPS: <a href=\"https://www.youtube.com/watch?v=_CXx69sveyc\" target=\"_blank\">https://www.youtube.com/watch?v=_CXx69sveyc</a></p>\n\n                        <h4>Instructions:</h4>\n                            <p><span>1.</span>Log in as the root user. (You may need to create a secure connection to your server using PuTTY, Terminal or a similar tool)</p>\n                            <p><span>2.</span>Open the command prompt, ensure you are in the root directory</p>\n                            <p><span>3.</span>If you have not run Minima before, please ensure you have the latest version of Java installed on the server <a href=\"https://java.com/en/\" target=\"_blank\">https://java.com/en/</a>  </p>\n                            <p><span>4.</span>From the root directory, please run the following script:</p>\n                            <code>\n                            wget -O minima_setup.sh https://raw.githubusercontent.com/minima-global/Minima/master/scripts/minima_setup.sh && chmod +x minima_setup.sh && sudo ./minima_setup.sh -r 9002 -p 9001\n                            </code>\n                            <p><span>5.</span>This may take up to 30 minutes for the script to complete and for Minima to start. Please be patient, you will be instructed when it has completed.</p>\n                            <p>Running multiple nodes on one server? You can specify different port numbers on the end to do this. For example (using 9122 and 9121): </p>\n                            <code>wget -O minima_setup.sh https://raw.githubusercontent.com/minima-global/Minima/master/scripts/minima_setup.sh && chmod +x minima_setup.sh && sudo ./minima_setup.sh -r 9122 -p 9121</code>\n                        <button onClick={handleClick} className=\"btn btn-primary mb-4 mt-2\">\n                        Download Minima\n                        </button>\n                        <button onClick={handleContentTwo} className=\"btn btn-outline-primary\">\n                        Next Step\n                        </button>\n                    </div> :  \"\" } \n                { showContentTwo ?                       \n                    <div className='form-group'>\n                        <h4>Steps:</h4>\n                            <p><span>1.</span>Once the Minima is running, connect your Incentive Account to your node by copying your Incentive ID from the bottom of this page: </p>\n                            <p><span>2.</span>To send commands to Minima, you need to have curl installed. If you do not have curl installed, type the following directly into the command line:</p>\n                            <code>\n                            sudo apt install curl\n                            </code>\n                            <p><span>3.</span>To set your Incentive ID, type the following directly into the command line, replacing the xxx with your ID:</p>\n                            <code>\n                            curl 127.0.0.1:9002/incentivecash%20uid:xxx-xxx-xxx-xxx-xxx\n                            </code>\n                        <h4>Example:</h4>\n                            <code>\n                            curl 127.0.0.1:9002/incentivecash%20uid:00F3E50D-5A52-444B-8F1A-0DA72D6CAA84\n                            </code>\n                            <p>You should receive a return status of <span className='codeline'>true</span> and see your previous reward balance (if any).</p>\n                            <p>If you have multiple nodes on one server, you will need to change the port number in the curl command to the same port number used after -r with the installation script</p>\n                          <h4>Example:</h4>\n                            <code>curl 127.0.0.1:9122/incentivecash%20uid:xxx-xxx-xxx-xxx-xxx</code>\n                            <p>Your Incentive Program account is now connected to your node! </p>\n                            <p><span>4.</span>Your node will then ping us so we know it's running. </p>\n                            <p><span>5.</span>For every day your node pings us, we'll add 1 Reward to your DAILY REWARDS. </p>\n                            <p><span>6.</span>To check your rewards, type <span className='codeline'>curl 127.0.0.1:9002/incentivecash | jq</span> into the command line.</p>\n                            <label><strong>Incentive ID</strong></label>\n                            <input className='form-control mb-4'\n                                name=\"id\"\n                                type=\"text\"\n                                defaultValue={nodeId}\n\n                            />\n                        <button type=\"submit\" onClick={() => {\n                                    navigator.clipboard.writeText(nodeId)\n                                    setNodeIdCopied(true)\n                                    setTimeout(() => {\n                                      setNodeIdCopied(false)\n                                    }, 2000);\n                                }}\n                                className=\"btn btn-primary mt-2\">\n                            {nodeIdCopied ? 'Copied' : 'Copy'}\n                        </button>\n                    </div>  : \"\" }  \n              </div>\n        </div>\n    </>\n    )\n}\n\nexport { GetStartedVPS }\n","import React, { useEffect, useState} from 'react'\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getNodeId, selectNodeId } from '../home.slice'\n\n\nfunction IncentiveID() {\n    const dispatch = useDispatch()\n\n    const nodeId = useSelector(selectNodeId)\n    const [nodeIdCopied, setNodeIdCopied] = useState(false)\n\n    useEffect(() => {\n        dispatch(getNodeId())\n    }, [dispatch])\n\n    return (\n        <>\n            <h3 className=\"card-header\">Incentive ID</h3>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className='form-group'>\n                    <p className='text-center'>Your Incentive ID can be found below. If you do not know what you need to do with your Incentive ID, please navigate to <Link to={`${process.env.PUBLIC_URL}/home/pages/get-started`}>Get Started</Link> for further instructions.</p>\n                        <label><strong>Incentive ID</strong></label>\n                        <input className='form-control mb-4'\n                            name=\"id\"\n                            type=\"text\"\n                            defaultValue={nodeId}\n\n                        />\n\n                        <button type=\"submit\" onClick={() => {\n                                    navigator.clipboard.writeText(nodeId)\n                                    setNodeIdCopied(true)\n                                    setTimeout(() => {\n                                      setNodeIdCopied(false)\n                                    }, 2000);\n                                }}\n                                className=\"btn btn-primary mt-2\">\n                            {nodeIdCopied ? 'Copied' : 'Copy'}\n                        </button>\n                    </div>\n                </div>\n            </div>  \n        </>\n    )\n}\n\nexport { IncentiveID }\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n    selectInviteCode,\n} from './../home.slice'\n\n\nfunction InviteLink() {\n    const tmpInviteCode = useSelector(selectInviteCode)\n    const inviteCode = tmpInviteCode ? 'https://incentive.minima.global/account/register?inviteCode=' + tmpInviteCode: tmpInviteCode;\n\n    const [inviteCodeCopied, setInviteCodeCopied] = useState(false)\n\n    useEffect(() => {\n      window.scrollTo(0, 0);\n  }, [])\n\n\n\n    return (\n        <>\n            <h3 className=\"card-header\">Invite Link</h3>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className=\"form-group\">\n                      <p className=\"text-center\"><strong>Your Invite Link enables you to earn additional Rewards for inviting others to run a node and join the Incentive Program.</strong></p>\n                      <p className=\"text-center\">Once the Minima network reaches one million nodes, Invite Codes will no longer be active.</p>\n                      <label><strong>Invite Link</strong></label>\n                      <input className='form-control mb-4'\n                          name=\"id\"\n                          type=\"text\"\n                          defaultValue={inviteCode}\n                      />\n                      <button type=\"submit\" onClick={() => {\n                              navigator.clipboard.writeText(inviteCode)\n                              setInviteCodeCopied(true)\n                              setTimeout(() => {\n                                setInviteCodeCopied(false)\n                              }, 2000);\n                              }}\n                              className=\"btn btn-primary mt-2\">\n                          {inviteCodeCopied ? 'Copied' : 'Copy'}\n                      </button>\n                    </div>\n                </div>\n            </div>  \n        </>\n    )\n}\n\nexport { InviteLink }\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    getRewards,\n    selectDailyRewards,\n    selectPreviousRewards,\n    selectInviterRewards,\n} from './../home.slice'\n\n\nfunction RewardsPage() {\n    const dispatch = useDispatch()\n\n    const dailyRewards = useSelector(selectDailyRewards)\n    const previousRewards = useSelector(selectPreviousRewards)\n    const inviterRewards = useSelector(selectInviterRewards)\n\n    const [showContentOne, setShowContentOne] = useState(true)\n    const [showContentTwo, setShowContentTwo] = useState(false)\n\n    useEffect(() => {\n        dispatch(getRewards())\n    }, [dispatch])\n\n    function handleContentOne(){\n        setShowContentOne(true)\n        setShowContentTwo(false)\n    }\n    function handleContentTwo(){\n        setShowContentOne(false)\n        setShowContentTwo(true)\n    }\n\n    return (\n        <>\n            <h3 className=\"card-header\">Rewards</h3>\n            <div className=\"card-body\">\n                <div className=\"form-row\">\n                    <div className='form-group tab-row'>\n                        <button type=\"submit\" onClick={handleContentOne} className={`btn mb-4 ${showContentOne ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Rewards\n                        </button>\n                        <button type=\"submit\" onClick={handleContentTwo} className={`btn mb-4 ${showContentTwo ? \"btn-dark\" : \"btn-outline-dark\"}`}>\n                            Rewards info\n                        </button>\n                    </div>    \n                </div>  \n                <div className=\"form-row\">\n                    { showContentOne ? \n                        <div className='form-group'>\n                                <label>Total Rewards</label>\n                                <div className='infobox mb-4'>\n                                    <span>{dailyRewards + inviterRewards + previousRewards}</span>\n                                </div>\n                                <h4 className='h4-mid mb-3'>Breakdown of Rewards</h4>\n                                <label>Total Daily Node Rewards</label>\n                                <div className='infobox mb-4'>\n                                    <span>{dailyRewards}</span>\n                                </div>\n                                <label>Total Invite Rewards</label>\n                                <div className='infobox mb-4'>\n                                    <span>{inviterRewards}</span>\n                                </div>\n                                <label>Total Additional Rewards</label>\n                                <div className='infobox mb-4'>\n                                    <span>{previousRewards}</span>\n                                </div>\n\n                        </div> :  \"\" } \n                    { showContentTwo ?                       \n                        <div className='form-group'>\n                            <h4>Daily Node Rewards</h4>\n                            <p>You will earn 1 Reward each day your node is successfully connected to the network. Any Rewards earned before the Dec 21 Hard Fork are included in this total. </p>\n\n                            <h4>Invite Rewards</h4>\n                            <p>For every person who registers using your Invite Link, you will earn an additional Reward of 0.1, each day their node is connected to the network. \n                                As an example, if you invite your friends & they run a node for 100 days, this is what you could earn:  </p>\n\n                            <div className='infobox mb-4'>\n                                <span>5 People Invited</span>\n                                <span className='infobox-blue'>50 Rewards</span>\n                            </div>\n                            <div className='infobox mb-4'>\n                                <span>10 People Invited</span>\n                                <span className='infobox-blue'>100 Rewards</span>\n                            </div>\n                            <div className='infobox mb-4'>\n                                <span>15 People Invited</span>\n                                <span className='infobox-blue'>150 Rewards</span>\n                            </div>\n                            <div className='infobox mb-4'>\n                                <span>20 People Invited</span>\n                                <span className='infobox-blue'>200 Rewards</span>\n                            </div>\n\n                            <h4>Additional Rewards</h4>\n                            <p>You can earn additional Rewards for:<br /><br />\n                            &bull; Bug Reports<br />\n                            &bull; Bounty Rewards<br />\n                            &bull; Strategic Grants<br />\n                            &bull; Developer Grants<br />\n                            &bull; Prizes\n\n                            </p>\n\n                        </div>  : \"\" }  \n                </div>\n            </div>\n        </>\n    )\n}\n\nexport { RewardsPage }\n","import React from 'react'\nimport { Login } from '../account/Login'\nimport { Register } from '../account/Register'\nimport { RegistratonVerifyEmail } from '../account/RegistratonVerifyEmail'\nimport { ForgotPassword } from '../account/ForgotPassword'\nimport PasswordResetContainer from '../account/password-reset/PasswordResetContainer'\nimport AccountLayout from '../account/AccountLayout'\nimport MainLayout from './../_components/MainLayout'\nimport { GetStarted } from '../home/pages/GetStarted'\nimport { GetStartedAndroid } from '../home/pages/GetStartedAndroid'\nimport { GetStartedWindows } from '../home/pages/GetStartedWindows'\nimport { GetStartedMac } from '../home/pages/GetStartedMac'\nimport { GetStartedLinux} from '../home/pages/GetStartedLinux'\nimport { GetStartedVPS } from '../home/pages/GetStartedVPS'\nimport { IncentiveID } from '../home/pages/IncentiveID'\nimport { InviteLink } from '../home/pages/InviteLink'\nimport { RewardsPage } from '../home/pages/RewardsPage'\n\nconst AppRoutes = [\n    {\n        path: '/',\n        element: <MainLayout></MainLayout>,\n        children: [\n            {\n                index: true,\n                element: <GetStarted></GetStarted>,\n            },\n            {\n                path: 'home/pages/get-started',\n                element: <GetStarted></GetStarted>,\n            },\n            {\n                path: 'home/pages/get-started-android',\n                element: <GetStartedAndroid></GetStartedAndroid>,\n            },\n            {\n                path: 'home/pages/get-started-windows',\n                element: <GetStartedWindows></GetStartedWindows>,\n            },\n            {\n                path: 'home/pages/get-started-mac',\n                element: <GetStartedMac></GetStartedMac>,\n            },\n            {\n                path: 'home/pages/get-started-linux',\n                element: <GetStartedLinux></GetStartedLinux>,\n            },\n            {\n                path: 'home/pages/get-started-linuxvps',\n                element: <GetStartedVPS></GetStartedVPS>,\n            },\n            {\n                path: 'home/pages/incentiveid',\n                element: <IncentiveID></IncentiveID>,\n            },\n            {\n                path: 'home/pages/invite-link',\n                element: <InviteLink></InviteLink>,\n            },\n            {\n                path: 'home/pages/rewards',\n                element: <RewardsPage></RewardsPage>,\n            },\n        ],\n    },\n    {\n        path: 'account',\n        element: <AccountLayout></AccountLayout>,\n        children: [\n            {\n                index: true,\n                element: <Login></Login>,\n            },\n            {\n                path: 'login',\n                element: <Login></Login>,\n            },\n            {\n                path: 'register',\n                element: <Register></Register>,\n            },\n            {\n                path: 'registration-verify-email',\n                element: <RegistratonVerifyEmail></RegistratonVerifyEmail>,\n            },\n            {\n                path: 'forgot-password',\n                element: <ForgotPassword></ForgotPassword>,\n            },\n            {\n                path: 'reset-password',\n                element: <PasswordResetContainer></PasswordResetContainer>,\n            },\n        ],\n    },\n]\n\nexport default AppRoutes\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectSpinning } from './spinner.slice'\n\nfunction Spinner() {\n    const visible = useSelector(selectSpinning)\n\n    const spinnerStyle = {\n        position: 'absolute',\n        left: '50%',\n        top: '30%',\n    }\n\n    const parentDisable = {\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        background: '#666',\n        opacity: '0.3',\n        zIndex: '998',\n        height: '100%',\n        width: '100%',\n    }\n\n    const mySpinner = () => (\n        <div style={parentDisable}>\n            <div style={spinnerStyle} className=\"d-flex justify-content-center\">\n                <div className=\"spinner-border\" role=\"status\"></div>\n            </div>\n        </div>\n    )\n\n    if (visible) {\n        return mySpinner()\n    } else {\n        return <></>\n    }\n}\n\nexport default Spinner\n","import React, { useEffect } from 'react'\nimport { useRoutes } from 'react-router-dom'\nimport AppRoutes from '../routes/app.routes'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loggedInTest } from '../account/account.slice.js'\nimport Spinner from './spinner/Spinner'\nimport ReactGA from \"react-ga4\";\n\nReactGA.initialize(\"G-DDSV5HNX4J\");\nReactGA.send(\"pageview\");\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    // Login check with back end\n    useEffect(() => {\n        dispatch(loggedInTest(`/api/test`))\n    }, [dispatch])\n\n    const routes = useRoutes(AppRoutes)\n\n    return (\n        <>\n            <div className='mn-wrap'>{routes}</div>\n            <Spinner></Spinner>\n        </>\n    )\n}\n\nexport { App }\n","import { configureStore } from '@reduxjs/toolkit'\nimport accountReducer from './../account/account.slice'\nimport homeReducer from './../home/home.slice'\nimport spinnerReducer from './spinner/spinner.slice'\n\nexport default configureStore({\n    reducer: {\n        account: accountReducer,\n        home: homeReducer,\n        spinner: spinnerReducer,\n    },\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport \"./assets/scss/minima.scss\"\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from './app/App.jsx'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nstartApp()\n\nfunction startApp() {\n    render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('app')\n    )\n}\n"],"sourceRoot":""}